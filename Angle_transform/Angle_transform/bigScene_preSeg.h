#ifndef BIGSCENE_PRESEG_H
#define BIGSCENE_PRESEG_H

#include "common_type.h"
#include <pcl/point_types.h>
#include <pcl/io/pcd_io.h>
#include <pcl/ModelCoefficients.h>
#include <pcl/common/transforms.h>

#include <Wm5IntrTriangle3Triangle3.h>

using namespace std;
using namespace Wm5;

#define PI 3.1415926535
#define EIGEN_YES_I_KNOW_SPARSE_MODULE_IS_NOT_STABLE_YET 

const float g_color_table[256][3] = {
  0, 0, 0.5156
  , 0, 0, 0.5313
  , 0, 0, 0.5469
  , 0, 0, 0.5625
  , 0, 0, 0.5781
  , 0, 0, 0.5938
  , 0, 0, 0.6094
  , 0, 0, 0.6250
  , 0, 0, 0.6406
  , 0, 0, 0.6563
  , 0, 0, 0.6719
  , 0, 0, 0.6875
  , 0, 0, 0.7031
  , 0, 0, 0.7188
  , 0, 0, 0.7344
  , 0, 0, 0.7500
  , 0, 0, 0.76564
  , 0, 0, 0.7813
  , 0, 0, 0.7969
  , 0, 0, 0.8125
  , 0, 0, 0.8281
  , 0, 0, 0.8438
  , 0, 0, 0.8594
  , 0, 0, 0.8750
  , 0, 0, 0.8906
  , 0, 0, 0.9063
  , 0, 0, 0.9219
  , 0, 0, 0.9375
  , 0, 0, 0.9531
  , 0, 0, 0.9688
  , 0, 0, 0.9844
  , 0, 0, 1.0000
  , 0, 0.0156, 1.0000
  , 0, 0.0313, 1.0000
  , 0, 0.0469, 1.0000
  , 0, 0.0625, 1.0000
  , 0, 0.0781, 1.0000
  , 0, 0.0938, 1.0000
  , 0, 0.1094, 1.0000
  , 0, 0.1250, 1.0000
  , 0, 0.1406, 1.0000
  , 0, 0.1563, 1.0000
  , 0, 0.1719, 1.0000
  , 0, 0.1875, 1.0000
  , 0, 0.2031, 1.0000
  , 0, 0.2188, 1.0000
  , 0, 0.2344, 1.0000
  , 0, 0.2500, 1.0000
  , 0, 0.2656, 1.0000
  , 0, 0.2813, 1.0000
  , 0, 0.2969, 1.0000
  , 0, 0.3125, 1.0000
  , 0, 0.3281, 1.0000
  , 0, 0.3438, 1.0000
  , 0, 0.3594, 1.0000
  , 0, 0.3750, 1.0000
  , 0, 0.3906, 1.0000
  , 0, 0.4063, 1.0000
  , 0, 0.4219, 1.0000
  , 0, 0.4375, 1.0000
  , 0, 0.4531, 1.0000
  , 0, 0.4688, 1.0000
  , 0, 0.4844, 1.0000
  , 0, 0.5000, 1.0000
  , 0, 0.5156, 1.0000
  , 0, 0.5313, 1.0000
  , 0, 0.5469, 1.0000
  , 0, 0.5625, 1.0000
  , 0, 0.5781, 1.0000
  , 0, 0.5938, 1.0000
  , 0, 0.6094, 1.0000
  , 0, 0.6250, 1.0000
  , 0, 0.6406, 1.0000
  , 0, 0.6563, 1.0000
  , 0, 0.6719, 1.0000
  , 0, 0.6875, 1.0000
  , 0, 0.7031, 1.0000
  , 0, 0.7188, 1.0000
  , 0, 0.7344, 1.0000
  , 0, 0.7500, 1.0000
  , 0, 0.7656, 1.0000
  , 0, 0.7813, 1.0000
  , 0, 0.7969, 1.0000
  , 0, 0.8125, 1.0000
  , 0, 0.8281, 1.0000
  , 0, 0.8438, 1.0000
  , 0, 0.8594, 1.0000
  , 0, 0.8750, 1.0000
  , 0, 0.8906, 1.0000
  , 0, 0.9063, 1.0000
  , 0, 0.9219, 1.0000
  , 0, 0.9375, 1.0000
  , 0, 0.9531, 1.0000
  , 0, 0.9688, 1.0000
  , 0, 0.9844, 1.0000
  , 0, 1.0000, 1.0000
  , 0.0156, 1.0000, 0.9844
  , 0.0313, 1.0000, 0.9688
  , 0.0469, 1.0000, 0.9531
  , 0.0625, 1.0000, 0.9375
  , 0.0781, 1.0000, 0.9219
  , 0.0938, 1.0000, 0.9063
  , 0.1094, 1.0000, 0.8906
  , 0.1250, 1.0000, 0.8750
  , 0.1406, 1.0000, 0.8594
  , 0.1563, 1.0000, 0.8438
  , 0.1719, 1.0000, 0.8281
  , 0.1875, 1.0000, 0.8125
  , 0.2031, 1.0000, 0.7969
  , 0.2188, 1.0000, 0.7813
  , 0.2344, 1.0000, 0.7656
  , 0.2500, 1.0000, 0.7500
  , 0.2656, 1.0000, 0.7344
  , 0.2813, 1.0000, 0.7188
  , 0.2969, 1.0000, 0.7031
  , 0.3125, 1.0000, 0.6875
  , 0.3281, 1.0000, 0.6719
  , 0.3438, 1.0000, 0.6563
  , 0.3594, 1.0000, 0.6406
  , 0.3750, 1.0000, 0.6250
  , 0.3906, 1.0000, 0.6094
  , 0.4063, 1.0000, 0.5938
  , 0.4219, 1.0000, 0.5781
  , 0.4375, 1.0000, 0.5625
  , 0.4531, 1.0000, 0.5469
  , 0.4688, 1.0000, 0.5313
  , 0.4844, 1.0000, 0.5156
  , 0.5000, 1.0000, 0.5000
  , 0.5156, 1.0000, 0.4844
  , 0.5313, 1.0000, 0.4688
  , 0.5469, 1.0000, 0.4531
  , 0.5625, 1.0000, 0.4375
  , 0.5781, 1.0000, 0.4219
  , 0.5938, 1.0000, 0.4063
  , 0.6094, 1.0000, 0.3906
  , 0.6250, 1.0000, 0.3750
  , 0.6406, 1.0000, 0.3594
  , 0.6563, 1.0000, 0.3438
  , 0.6719, 1.0000, 0.3281
  , 0.6875, 1.0000, 0.3125
  , 0.7031, 1.0000, 0.2969
  , 0.7188, 1.0000, 0.2813
  , 0.7344, 1.0000, 0.2656
  , 0.7500, 1.0000, 0.2500
  , 0.7656, 1.0000, 0.2344
  , 0.7813, 1.0000, 0.2188
  , 0.7969, 1.0000, 0.2031
  , 0.8125, 1.0000, 0.1875
  , 0.8281, 1.0000, 0.1719
  , 0.8438, 1.0000, 0.1563
  , 0.8594, 1.0000, 0.1406
  , 0.8750, 1.0000, 0.1250
  , 0.8906, 1.0000, 0.1094
  , 0.9063, 1.0000, 0.0938
  , 0.9219, 1.0000, 0.0781
  , 0.9375, 1.0000, 0.0625
  , 0.9531, 1.0000, 0.0469
  , 0.9688, 1.0000, 0.0313
  , 0.9844, 1.0000, 0.0156
  , 1.0000, 1.0000, 0
  , 1.0000, 0.9844, 0
  , 1.0000, 0.9688, 0
  , 1.0000, 0.9531, 0
  , 1.0000, 0.9375, 0
  , 1.0000, 0.9219, 0
  , 1.0000, 0.9063, 0
  , 1.0000, 0.8906, 0
  , 1.0000, 0.8750, 0
  , 1.0000, 0.8594, 0
  , 1.0000, 0.8438, 0
  , 1.0000, 0.8281, 0
  , 1.0000, 0.8125, 0
  , 1.0000, 0.7969, 0
  , 1.0000, 0.7813, 0
  , 1.0000, 0.7656, 0
  , 1.0000, 0.7500, 0
  , 1.0000, 0.7344, 0
  , 1.0000, 0.7188, 0
  , 1.0000, 0.7031, 0
  , 1.0000, 0.6875, 0
  , 1.0000, 0.6719, 0
  , 1.0000, 0.6563, 0
  , 1.0000, 0.6406, 0
  , 1.0000, 0.6250, 0
  , 1.0000, 0.6094, 0
  , 1.0000, 0.5938, 0
  , 1.0000, 0.5781, 0
  , 1.0000, 0.5625, 0
  , 1.0000, 0.5469, 0
  , 1.0000, 0.5313, 0
  , 1.0000, 0.5156, 0
  , 1.0000, 0.5000, 0
  , 1.0000, 0.4844, 0
  , 1.0000, 0.4688, 0
  , 1.0000, 0.4531, 0
  , 1.0000, 0.4375, 0
  , 1.0000, 0.4219, 0
  , 1.0000, 0.4063, 0
  , 1.0000, 0.3906, 0
  , 1.0000, 0.3750, 0
  , 1.0000, 0.3594, 0
  , 1.0000, 0.3438, 0
  , 1.0000, 0.3281, 0
  , 1.0000, 0.3125, 0
  , 1.0000, 0.2969, 0
  , 1.0000, 0.2813, 0
  , 1.0000, 0.2656, 0
  , 1.0000, 0.2500, 0
  , 1.0000, 0.2344, 0
  , 1.0000, 0.2188, 0
  , 1.0000, 0.2031, 0
  , 1.0000, 0.1875, 0
  , 1.0000, 0.1719, 0
  , 1.0000, 0.1563, 0
  , 1.0000, 0.1406, 0
  , 1.0000, 0.1250, 0
  , 1.0000, 0.1094, 0
  , 1.0000, 0.0938, 0
  , 1.0000, 0.0781, 0
  , 1.0000, 0.0625, 0
  , 1.0000, 0.0469, 0
  , 1.0000, 0.0313, 0
  , 1.0000, 0.0156, 0
  , 1.0000, 0, 0
  , 0.9844, 0, 0
  , 0.9688, 0, 0
  , 0.9531, 0, 0
  , 0.9375, 0, 0
  , 0.9219, 0, 0
  , 0.9063, 0, 0
  , 0.8906, 0, 0
  , 0.8750, 0, 0
  , 0.8594, 0, 0
  , 0.8438, 0, 0
  , 0.8281, 0, 0
  , 0.8125, 0, 0
  , 0.7969, 0, 0
  , 0.7813, 0, 0
  , 0.7656, 0, 0
  , 0.7500, 0, 0
  , 0.7344, 0, 0
  , 0.7188, 0, 0
  , 0.7031, 0, 0
  , 0.6875, 0, 0
  , 0.6719, 0, 0
  , 0.6563, 0, 0
  , 0.6406, 0, 0
  , 0.6250, 0, 0
  , 0.6094, 0, 0
  , 0.5938, 0, 0
  , 0.5781, 0, 0
  , 0.5625, 0, 0
  , 0.5469, 0, 0
  , 0.5313, 0, 0
  , 0.5156, 0, 0
  , 0.5000, 0, 0
};

void showPointCloud (PointCloudPtr_RGB cloud,std::string name);
//get rotation matrix
void getRotationMatrix(Eigen::Vector3d &axis, double angleArc, Eigen::Matrix4d &matrix);
//detct floor
void detect_floor_and_walls(PointCloudPtr_RGB cloud, MyPointCloud_RGB& floor_cloud, pcl::ModelCoefficients& floor_coefficients, MyPointCloud& floor_rect_cloud, vector<MyPointCloud_RGB> &wall_clouds, std::vector<MyPointCloud> &wall_rect_clouds, PointCloudPtr_RGB remained_cloud);
//detct support plane
void detect_support_plane(PointCloudPtr_RGB cloud, vector<MyPointCloud_RGB> &support_clouds, std::vector<MyPointCloud> &support_rect_clouds, PointCloudPtr_RGB remained_cloud);
//Euclidean Cluster Extraction
void big_object_seg_ECE(PointCloudPtr_RGB cloud, std::vector<PointCloudPtr_RGB> &cluster_points);
//mark remaining cloud by bounding box
void mark_remaining_cloud(PointCloudPtr_RGB sourceCloud, PointCloudPtr cloud);
//compute gaussian curvature
void compute_gaussian_curvature(PointCloudPtr_RGB cloud, vector<Point_Cur_RGB>& curvatures, PointCloudPtr_RGB cloud_colored);
//compute gaussian curvature
void compute_mean_curvature(PointCloudPtr_RGB cloud, vector<Point_Cur_RGB>& curvatures, PointCloudPtr_RGB cloud_colored);
//projecte curvature to x_y plane
void curvature_projected(PointCloudPtr_RGB cloud, vector<Point_Cur_RGB>& curvatures, PointCloudPtr_RGB cloud_colored, vector<Point_Cur_RGB>& projected_curvatures);


void big_plane_fitting(PointCloudPtr_RGB sourceCloud, MyPointCloud_RGB &plane_cloud, MyPointCloud &rect_cloud, pcl::ModelCoefficients::Ptr plane_coefficients, PointCloudPtr_RGB remained_cloud);

#endif //BIGSCENE_PRESEG_H
